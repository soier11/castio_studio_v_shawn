{"ast":null,"code":"import{ThemeColors}from\"../../helpers/ThemeColors\";export const chartTooltip={backgroundColor:ThemeColors().foregroundColor,titleFontColor:ThemeColors().primaryColor,borderColor:ThemeColors().separatorColor,borderWidth:0.5,bodyFontColor:ThemeColors().primaryColor,bodySpacing:10,xPadding:15,yPadding:15,cornerRadius:0.15};export const centerTextPlugin={afterDatasetsUpdate:function afterDatasetsUpdate(chart){},beforeDraw:function beforeDraw(chart){var width=chart.chartArea.right;var height=chart.chartArea.bottom;var ctx=chart.chart.ctx;ctx.restore();var activeLabel=chart.data.labels[0];var activeValue=chart.data.datasets[0].data[0];var dataset=chart.data.datasets[0];var meta=dataset._meta[Object.keys(dataset._meta)[0]];var total=meta.total;var activePercentage=parseFloat((activeValue/total*100).toFixed(1));activePercentage=chart.legend.legendItems[0].hidden?0:activePercentage;if(chart.pointAvailable){activeLabel=chart.data.labels[chart.pointIndex];activeValue=chart.data.datasets[chart.pointDataIndex].data[chart.pointIndex];dataset=chart.data.datasets[chart.pointDataIndex];meta=dataset._meta[Object.keys(dataset._meta)[0]];total=meta.total;activePercentage=parseFloat((activeValue/total*100).toFixed(1));activePercentage=chart.legend.legendItems[chart.pointIndex].hidden?0:activePercentage;}ctx.font='36px Nunito, sans-serif';ctx.fillStyle=ThemeColors().primaryColor;ctx.textBaseline='middle';var text=activePercentage+'%';var textX=Math.round((width-ctx.measureText(text).width)/2);var textY=height/2;ctx.fillText(text,textX,textY);ctx.font='14px Nunito, sans-serif';ctx.textBaseline='middle';var text2=activeLabel;var textX2=Math.round((width-ctx.measureText(text2).width)/2);var textY2=height/2-30;ctx.fillText(text2,textX2,textY2);ctx.save();},beforeEvent:function beforeEvent(chart,event,options){var firstPoint=chart.getElementAtEvent(event)[0];if(firstPoint){chart.pointIndex=firstPoint._index;chart.pointDataIndex=firstPoint._datasetIndex;chart.pointAvailable=true;}}};","map":{"version":3,"sources":["/Users/soier/Code/studio_v_shawn/studio_v2/src/components/charts/util.js"],"names":["ThemeColors","chartTooltip","backgroundColor","foregroundColor","titleFontColor","primaryColor","borderColor","separatorColor","borderWidth","bodyFontColor","bodySpacing","xPadding","yPadding","cornerRadius","centerTextPlugin","afterDatasetsUpdate","chart","beforeDraw","width","chartArea","right","height","bottom","ctx","restore","activeLabel","data","labels","activeValue","datasets","dataset","meta","_meta","Object","keys","total","activePercentage","parseFloat","toFixed","legend","legendItems","hidden","pointAvailable","pointIndex","pointDataIndex","font","fillStyle","textBaseline","text","textX","Math","round","measureText","textY","fillText","text2","textX2","textY2","save","beforeEvent","event","options","firstPoint","getElementAtEvent","_index","_datasetIndex"],"mappings":"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","sourcesContent":["\r\nimport { ThemeColors } from \"../../helpers/ThemeColors\";\r\n\r\nexport const chartTooltip = {\r\n    backgroundColor: ThemeColors().foregroundColor,\r\n    titleFontColor: ThemeColors().primaryColor,\r\n    borderColor: ThemeColors().separatorColor,\r\n    borderWidth: 0.5,\r\n    bodyFontColor: ThemeColors().primaryColor,\r\n    bodySpacing: 10,\r\n    xPadding: 15,\r\n    yPadding: 15,\r\n    cornerRadius: 0.15\r\n  }\r\n  \r\n  export const centerTextPlugin = {\r\n    afterDatasetsUpdate: function (chart) {},\r\n    beforeDraw: function (chart) {\r\n      var width = chart.chartArea.right\r\n      var height = chart.chartArea.bottom\r\n      var ctx = chart.chart.ctx\r\n      ctx.restore()\r\n  \r\n      var activeLabel = chart.data.labels[0]\r\n      var activeValue = chart.data.datasets[0].data[0]\r\n      var dataset = chart.data.datasets[0]\r\n      var meta = dataset._meta[Object.keys(dataset._meta)[0]]\r\n      var total = meta.total\r\n  \r\n      var activePercentage = parseFloat(((activeValue / total) * 100).toFixed(1))\r\n      activePercentage = chart.legend.legendItems[0].hidden\r\n        ? 0\r\n        : activePercentage\r\n  \r\n      if (chart.pointAvailable) {\r\n        activeLabel = chart.data.labels[chart.pointIndex]\r\n        activeValue =\r\n          chart.data.datasets[chart.pointDataIndex].data[chart.pointIndex]\r\n  \r\n        dataset = chart.data.datasets[chart.pointDataIndex]\r\n        meta = dataset._meta[Object.keys(dataset._meta)[0]]\r\n        total = meta.total\r\n        activePercentage = parseFloat(((activeValue / total) * 100).toFixed(1))\r\n        activePercentage = chart.legend.legendItems[chart.pointIndex].hidden\r\n          ? 0\r\n          : activePercentage\r\n      }\r\n  \r\n      ctx.font = '36px Nunito, sans-serif'\r\n      ctx.fillStyle = ThemeColors().primaryColor\r\n      ctx.textBaseline = 'middle'\r\n  \r\n      var text = activePercentage + '%'\r\n      var textX = Math.round((width - ctx.measureText(text).width) / 2)\r\n      var textY = height / 2\r\n      ctx.fillText(text, textX, textY)\r\n  \r\n      ctx.font = '14px Nunito, sans-serif'\r\n      ctx.textBaseline = 'middle'\r\n  \r\n      var text2 = activeLabel\r\n      var textX2 = Math.round((width - ctx.measureText(text2).width) / 2)\r\n      var textY2 = height / 2 - 30\r\n      ctx.fillText(text2, textX2, textY2)\r\n  \r\n      ctx.save()\r\n    },\r\n    beforeEvent: function (chart, event, options) {\r\n      var firstPoint = chart.getElementAtEvent(event)[0]\r\n  \r\n      if (firstPoint) {\r\n        chart.pointIndex = firstPoint._index\r\n        chart.pointDataIndex = firstPoint._datasetIndex\r\n        chart.pointAvailable = true\r\n      }\r\n    }\r\n  }\r\n  "]},"metadata":{},"sourceType":"module"}