{"ast":null,"code":"var _jsxFileName = \"/Users/soier/Code/santa/studio_v2/src/containers/navs/Topnav.js\";\nimport React, { Component } from \"react\";\nimport { injectIntl } from \"react-intl\";\nimport { UncontrolledDropdown, DropdownItem, DropdownToggle, DropdownMenu, Input } from \"reactstrap\";\nimport { NavLink } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport IntlMessages from \"../../helpers/IntlMessages\";\nimport { setContainerClassnames, clickOnMobileMenu, changeLocale } from \"../../redux/actions\";\nimport { menuHiddenBreakpoint, searchPath, localeOptions, isDarkSwitchActive } from \"../../constants/defaultValues\";\nimport { MobileMenuIcon, MenuIcon } from \"../../components/svg\";\nimport TopnavEasyAccess from \"./Topnav.EasyAccess\";\nimport TopnavNotifications from \"./Topnav.Notifications\";\nimport TopnavDarkSwitch from \"./Topnav.DarkSwitch\";\nimport { getDirection, setDirection } from \"../../helpers/Utils\";\n\nclass TopNav extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChangeLocale = (locale, direction) => {\n      this.props.changeLocale(locale);\n      const currentDirection = getDirection().direction;\n\n      if (direction !== currentDirection) {\n        setDirection(direction);\n        setTimeout(() => {\n          window.location.reload();\n        }, 500);\n      }\n    };\n\n    this.isInFullScreen = () => {\n      return document.fullscreenElement && document.fullscreenElement !== null || document.webkitFullscreenElement && document.webkitFullscreenElement !== null || document.mozFullScreenElement && document.mozFullScreenElement !== null || document.msFullscreenElement && document.msFullscreenElement !== null;\n    };\n\n    this.handleSearchIconClick = e => {\n      if (window.innerWidth < menuHiddenBreakpoint) {\n        let elem = e.target;\n\n        if (!e.target.classList.contains(\"search\")) {\n          if (e.target.parentElement.classList.contains(\"search\")) {\n            elem = e.target.parentElement;\n          } else if (e.target.parentElement.parentElement.classList.contains(\"search\")) {\n            elem = e.target.parentElement.parentElement;\n          }\n        }\n\n        if (elem.classList.contains(\"mobile-view\")) {\n          this.search();\n          elem.classList.remove(\"mobile-view\");\n          this.removeEventsSearch();\n        } else {\n          elem.classList.add(\"mobile-view\");\n          this.addEventsSearch();\n        }\n      } else {\n        this.search();\n      }\n    };\n\n    this.addEventsSearch = () => {\n      document.addEventListener(\"click\", this.handleDocumentClickSearch, true);\n    };\n\n    this.removeEventsSearch = () => {\n      document.removeEventListener(\"click\", this.handleDocumentClickSearch, true);\n    };\n\n    this.handleDocumentClickSearch = e => {\n      let isSearchClick = false;\n\n      if (e.target && e.target.classList && (e.target.classList.contains(\"navbar\") || e.target.classList.contains(\"simple-icon-magnifier\"))) {\n        isSearchClick = true;\n\n        if (e.target.classList.contains(\"simple-icon-magnifier\")) {\n          this.search();\n        }\n      } else if (e.target.parentElement && e.target.parentElement.classList && e.target.parentElement.classList.contains(\"search\")) {\n        isSearchClick = true;\n      }\n\n      if (!isSearchClick) {\n        const input = document.querySelector(\".mobile-view\");\n        if (input && input.classList) input.classList.remove(\"mobile-view\");\n        this.removeEventsSearch();\n        this.setState({\n          searchKeyword: \"\"\n        });\n      }\n    };\n\n    this.handleSearchInputChange = e => {\n      this.setState({\n        searchKeyword: e.target.value\n      });\n    };\n\n    this.handleSearchInputKeyPress = e => {\n      if (e.key === \"Enter\") {\n        this.search();\n      }\n    };\n\n    this.search = () => {\n      this.props.history.push(searchPath + \"/\" + this.state.searchKeyword);\n      this.setState({\n        searchKeyword: \"\"\n      });\n    };\n\n    this.toggleFullScreen = () => {\n      const isInFullScreen = this.isInFullScreen();\n      var docElm = document.documentElement;\n\n      if (!isInFullScreen) {\n        if (docElm.requestFullscreen) {\n          docElm.requestFullscreen();\n        } else if (docElm.mozRequestFullScreen) {\n          docElm.mozRequestFullScreen();\n        } else if (docElm.webkitRequestFullScreen) {\n          docElm.webkitRequestFullScreen();\n        } else if (docElm.msRequestFullscreen) {\n          docElm.msRequestFullscreen();\n        }\n      } else {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n          document.webkitExitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n          document.mozCancelFullScreen();\n        } else if (document.msExitFullscreen) {\n          document.msExitFullscreen();\n        }\n      }\n\n      this.setState({\n        isInFullScreen: !isInFullScreen\n      });\n    };\n\n    this.handleLogout = () => {//logout\n    };\n\n    this.menuButtonClick = (e, menuClickCount, containerClassnames) => {\n      e.preventDefault();\n      setTimeout(() => {\n        var event = document.createEvent(\"HTMLEvents\");\n        event.initEvent(\"resize\", false, false);\n        window.dispatchEvent(event);\n      }, 350);\n      this.props.setContainerClassnames(++menuClickCount, containerClassnames, this.props.selectedMenuHasSubItems);\n    };\n\n    this.mobileMenuButtonClick = (e, containerClassnames) => {\n      e.preventDefault();\n      this.props.clickOnMobileMenu(containerClassnames);\n    };\n\n    this.state = {\n      isInFullScreen: false,\n      searchKeyword: \"\"\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          containerClassnames = _this$props.containerClassnames,\n          menuClickCount = _this$props.menuClickCount,\n          locale = _this$props.locale;\n    const messages = this.props.intl.messages;\n    return /*#__PURE__*/React.createElement(\"nav\", {\n      className: \"navbar fixed-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex align-items-center navbar-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(NavLink, {\n      to: \"#\",\n      location: {},\n      className: \"menu-button d-none d-md-block\",\n      onClick: e => this.menuButtonClick(e, menuClickCount, containerClassnames),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(MenuIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(NavLink, {\n      to: \"#\",\n      location: {},\n      className: \"menu-button-mobile d-xs-block d-sm-block d-md-none\",\n      onClick: e => this.mobileMenuButtonClick(e, containerClassnames),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(MobileMenuIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(UncontrolledDropdown, {\n      className: \"ml-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DropdownToggle, {\n      caret: true,\n      color: \"light\",\n      size: \"sm\",\n      className: \"language-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }\n    }, locale.toUpperCase())), /*#__PURE__*/React.createElement(DropdownMenu, {\n      className: \"mt-3\",\n      right: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 15\n      }\n    }, localeOptions.map(l => {\n      return /*#__PURE__*/React.createElement(DropdownItem, {\n        onClick: () => this.handleChangeLocale(l.id, l.direction),\n        key: l.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }\n      }, l.name);\n    }))))), /*#__PURE__*/React.createElement(\"a\", {\n      className: \"navbar-logo\",\n      href: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"logo d-none d-xs-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"logo-mobile d-block d-xs-none\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"navbar-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }\n    }, isDarkSwitchActive && /*#__PURE__*/React.createElement(TopnavDarkSwitch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 34\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header-icons d-inline-block align-middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TopnavEasyAccess, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(TopnavNotifications, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"header-icon btn btn-empty d-none d-sm-inline-block\",\n      type: \"button\",\n      id: \"fullScreenButton\",\n      onClick: this.toggleFullScreen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 13\n      }\n    }, this.state.isInFullScreen ? /*#__PURE__*/React.createElement(\"i\", {\n      className: \"simple-icon-size-actual d-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 17\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      className: \"simple-icon-size-fullscreen d-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 19\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"user d-inline-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(UncontrolledDropdown, {\n      className: \"dropdown-menu-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DropdownToggle, {\n      className: \"p-0\",\n      color: \"empty\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"name mr-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 17\n      }\n    }, \"Sarah Kortney\"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      alt: \"Profile\",\n      src: \"/assets/img/profile-pic-l.jpg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 19\n      }\n    }))), /*#__PURE__*/React.createElement(DropdownMenu, {\n      className: \"mt-3\",\n      right: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(DropdownItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }\n    }, \"Account\"), /*#__PURE__*/React.createElement(DropdownItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 17\n      }\n    }, \"Features\"), /*#__PURE__*/React.createElement(DropdownItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 17\n      }\n    }, \"History\"), /*#__PURE__*/React.createElement(DropdownItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 17\n      }\n    }, \"Support\"), /*#__PURE__*/React.createElement(DropdownItem, {\n      divider: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(DropdownItem, {\n      onClick: () => this.handleLogout(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 17\n      }\n    }, \"Sign out\"))))));\n  }\n\n}\n\nconst mapStateToProps = ({\n  menu,\n  settings\n}) => {\n  const containerClassnames = menu.containerClassnames,\n        menuClickCount = menu.menuClickCount,\n        selectedMenuHasSubItems = menu.selectedMenuHasSubItems;\n  const locale = settings.locale;\n  return {\n    containerClassnames,\n    menuClickCount,\n    selectedMenuHasSubItems,\n    locale\n  };\n};\n\nexport default injectIntl(connect(mapStateToProps, {\n  setContainerClassnames,\n  clickOnMobileMenu,\n  changeLocale\n})(TopNav));","map":{"version":3,"sources":["/Users/soier/Code/santa/studio_v2/src/containers/navs/Topnav.js"],"names":["React","Component","injectIntl","UncontrolledDropdown","DropdownItem","DropdownToggle","DropdownMenu","Input","NavLink","connect","IntlMessages","setContainerClassnames","clickOnMobileMenu","changeLocale","menuHiddenBreakpoint","searchPath","localeOptions","isDarkSwitchActive","MobileMenuIcon","MenuIcon","TopnavEasyAccess","TopnavNotifications","TopnavDarkSwitch","getDirection","setDirection","TopNav","constructor","props","handleChangeLocale","locale","direction","currentDirection","setTimeout","window","location","reload","isInFullScreen","document","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","handleSearchIconClick","e","innerWidth","elem","target","classList","contains","parentElement","search","remove","removeEventsSearch","add","addEventsSearch","addEventListener","handleDocumentClickSearch","removeEventListener","isSearchClick","input","querySelector","setState","searchKeyword","handleSearchInputChange","value","handleSearchInputKeyPress","key","history","push","state","toggleFullScreen","docElm","documentElement","requestFullscreen","mozRequestFullScreen","webkitRequestFullScreen","msRequestFullscreen","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","handleLogout","menuButtonClick","menuClickCount","containerClassnames","preventDefault","event","createEvent","initEvent","dispatchEvent","selectedMenuHasSubItems","mobileMenuButtonClick","render","messages","intl","toUpperCase","map","l","id","name","mapStateToProps","menu","settings"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport {\r\n  UncontrolledDropdown,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  Input\r\n} from \"reactstrap\";\r\n\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\nimport {\r\n  setContainerClassnames,\r\n  clickOnMobileMenu,\r\n  changeLocale\r\n} from \"../../redux/actions\";\r\n\r\nimport {\r\n  menuHiddenBreakpoint,\r\n  searchPath,\r\n  localeOptions,\r\n  isDarkSwitchActive,\r\n} from \"../../constants/defaultValues\";\r\n\r\nimport { MobileMenuIcon, MenuIcon } from \"../../components/svg\";\r\nimport TopnavEasyAccess from \"./Topnav.EasyAccess\";\r\nimport TopnavNotifications from \"./Topnav.Notifications\";\r\nimport TopnavDarkSwitch from \"./Topnav.DarkSwitch\";\r\n\r\nimport { getDirection, setDirection } from \"../../helpers/Utils\";\r\n\r\nclass TopNav extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isInFullScreen: false,\r\n      searchKeyword: \"\"\r\n    };\r\n  }\r\n\r\n  handleChangeLocale = (locale, direction) => {\r\n    this.props.changeLocale(locale);\r\n\r\n    const currentDirection = getDirection().direction;\r\n    if (direction !== currentDirection) {\r\n      setDirection(direction);\r\n      setTimeout(() => {\r\n        window.location.reload();\r\n      }, 500);\r\n    }\r\n  };\r\n\r\n  isInFullScreen = () => {\r\n    return (\r\n      (document.fullscreenElement && document.fullscreenElement !== null) ||\r\n      (document.webkitFullscreenElement &&\r\n        document.webkitFullscreenElement !== null) ||\r\n      (document.mozFullScreenElement &&\r\n        document.mozFullScreenElement !== null) ||\r\n      (document.msFullscreenElement && document.msFullscreenElement !== null)\r\n    );\r\n  };\r\n  handleSearchIconClick = e => {\r\n    if (window.innerWidth < menuHiddenBreakpoint) {\r\n      let elem = e.target;\r\n      if (!e.target.classList.contains(\"search\")) {\r\n        if (e.target.parentElement.classList.contains(\"search\")) {\r\n          elem = e.target.parentElement;\r\n        } else if (\r\n          e.target.parentElement.parentElement.classList.contains(\"search\")\r\n        ) {\r\n          elem = e.target.parentElement.parentElement;\r\n        }\r\n      }\r\n\r\n      if (elem.classList.contains(\"mobile-view\")) {\r\n        this.search();\r\n        elem.classList.remove(\"mobile-view\");\r\n        this.removeEventsSearch();\r\n      } else {\r\n        elem.classList.add(\"mobile-view\");\r\n        this.addEventsSearch();\r\n      }\r\n    } else {\r\n      this.search();\r\n    }\r\n  };\r\n  addEventsSearch = () => {\r\n    document.addEventListener(\"click\", this.handleDocumentClickSearch, true);\r\n  };\r\n  removeEventsSearch = () => {\r\n    document.removeEventListener(\"click\", this.handleDocumentClickSearch, true);\r\n  };\r\n\r\n  handleDocumentClickSearch = e => {\r\n    let isSearchClick = false;\r\n    if (\r\n      e.target &&\r\n      e.target.classList &&\r\n      (e.target.classList.contains(\"navbar\") ||\r\n        e.target.classList.contains(\"simple-icon-magnifier\"))\r\n    ) {\r\n      isSearchClick = true;\r\n      if (e.target.classList.contains(\"simple-icon-magnifier\")) {\r\n        this.search();\r\n      }\r\n    } else if (\r\n      e.target.parentElement &&\r\n      e.target.parentElement.classList &&\r\n      e.target.parentElement.classList.contains(\"search\")\r\n    ) {\r\n      isSearchClick = true;\r\n    }\r\n\r\n    if (!isSearchClick) {\r\n      const input = document.querySelector(\".mobile-view\");\r\n      if (input && input.classList) input.classList.remove(\"mobile-view\");\r\n      this.removeEventsSearch();\r\n      this.setState({\r\n        searchKeyword: \"\"\r\n      });\r\n    }\r\n  };\r\n  handleSearchInputChange = e => {\r\n    this.setState({\r\n      searchKeyword: e.target.value\r\n    });\r\n  };\r\n  handleSearchInputKeyPress = e => {\r\n    if (e.key === \"Enter\") {\r\n      this.search();\r\n    }\r\n  };\r\n\r\n  search = () => {\r\n    this.props.history.push(searchPath + \"/\" + this.state.searchKeyword);\r\n    this.setState({\r\n      searchKeyword: \"\"\r\n    });\r\n  };\r\n\r\n  toggleFullScreen = () => {\r\n    const isInFullScreen = this.isInFullScreen();\r\n\r\n    var docElm = document.documentElement;\r\n    if (!isInFullScreen) {\r\n      if (docElm.requestFullscreen) {\r\n        docElm.requestFullscreen();\r\n      } else if (docElm.mozRequestFullScreen) {\r\n        docElm.mozRequestFullScreen();\r\n      } else if (docElm.webkitRequestFullScreen) {\r\n        docElm.webkitRequestFullScreen();\r\n      } else if (docElm.msRequestFullscreen) {\r\n        docElm.msRequestFullscreen();\r\n      }\r\n    } else {\r\n      if (document.exitFullscreen) {\r\n        document.exitFullscreen();\r\n      } else if (document.webkitExitFullscreen) {\r\n        document.webkitExitFullscreen();\r\n      } else if (document.mozCancelFullScreen) {\r\n        document.mozCancelFullScreen();\r\n      } else if (document.msExitFullscreen) {\r\n        document.msExitFullscreen();\r\n      }\r\n    }\r\n    this.setState({\r\n      isInFullScreen: !isInFullScreen\r\n    });\r\n  };\r\n\r\n  handleLogout = () => {\r\n    //logout\r\n  };\r\n\r\n  menuButtonClick = (e, menuClickCount, containerClassnames) => {\r\n    e.preventDefault();\r\n\r\n    setTimeout(() => {\r\n      var event = document.createEvent(\"HTMLEvents\");\r\n      event.initEvent(\"resize\", false, false);\r\n      window.dispatchEvent(event);\r\n    }, 350);\r\n    this.props.setContainerClassnames(\r\n      ++menuClickCount,\r\n      containerClassnames,\r\n      this.props.selectedMenuHasSubItems\r\n    );\r\n  };\r\n  mobileMenuButtonClick = (e, containerClassnames) => {\r\n    e.preventDefault();\r\n    this.props.clickOnMobileMenu(containerClassnames);\r\n  };\r\n\r\n  render() {\r\n    const { containerClassnames, menuClickCount, locale } = this.props;\r\n    const { messages } = this.props.intl;\r\n    return (\r\n      <nav className=\"navbar fixed-top\">\r\n        <div className=\"d-flex align-items-center navbar-left\">\r\n          <NavLink\r\n            to=\"#\" location={{}}\r\n            className=\"menu-button d-none d-md-block\"\r\n            onClick={e =>\r\n              this.menuButtonClick(e, menuClickCount, containerClassnames)\r\n            }\r\n          >\r\n            <MenuIcon />\r\n          </NavLink>\r\n          <NavLink\r\n            to=\"#\" location={{}}\r\n            className=\"menu-button-mobile d-xs-block d-sm-block d-md-none\"\r\n            onClick={e => this.mobileMenuButtonClick(e, containerClassnames)}\r\n          >\r\n            <MobileMenuIcon />\r\n          </NavLink>\r\n\r\n          {/* <div className=\"search\" data-search-path=\"/app/pages/search\">\r\n            <Input\r\n              name=\"searchKeyword\"\r\n              id=\"searchKeyword\"\r\n              placeholder={messages[\"menu.search\"]}\r\n              value={this.state.searchKeyword}\r\n              onChange={e => this.handleSearchInputChange(e)}\r\n              onKeyPress={e => this.handleSearchInputKeyPress(e)}\r\n            />\r\n            <span\r\n              className=\"search-icon\"\r\n              onClick={e => this.handleSearchIconClick(e)}\r\n            >\r\n              <i className=\"simple-icon-magnifier\" />\r\n            </span>\r\n          </div> */}\r\n\r\n          <div className=\"d-inline-block\">\r\n            <UncontrolledDropdown className=\"ml-2\">\r\n              <DropdownToggle\r\n                caret\r\n                color=\"light\"\r\n                size=\"sm\"\r\n                className=\"language-button\"\r\n              >\r\n                <span className=\"name\">{locale.toUpperCase()}</span>\r\n              </DropdownToggle>\r\n              <DropdownMenu className=\"mt-3\" right>\r\n                {localeOptions.map(l => {\r\n                  return (\r\n                    <DropdownItem\r\n                      onClick={() => this.handleChangeLocale(l.id, l.direction)}\r\n                      key={l.id}\r\n                    >\r\n                      {l.name}\r\n                    </DropdownItem>\r\n                  );\r\n                })}\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n          </div>\r\n        </div>\r\n        <a className=\"navbar-logo\" href=\"/\">\r\n          <span className=\"logo d-none d-xs-block\" />\r\n          <span className=\"logo-mobile d-block d-xs-none\" />\r\n        </a>\r\n        <div className=\"navbar-right\">\r\n          {isDarkSwitchActive && <TopnavDarkSwitch />}\r\n\r\n          <div className=\"header-icons d-inline-block align-middle\">\r\n\r\n            <TopnavEasyAccess />\r\n            <TopnavNotifications />\r\n            <button\r\n              className=\"header-icon btn btn-empty d-none d-sm-inline-block\"\r\n              type=\"button\"\r\n              id=\"fullScreenButton\"\r\n              onClick={this.toggleFullScreen}\r\n            >\r\n              {this.state.isInFullScreen ? (\r\n                <i className=\"simple-icon-size-actual d-block\" />\r\n              ) : (\r\n                  <i className=\"simple-icon-size-fullscreen d-block\" />\r\n                )}\r\n            </button>\r\n          </div>\r\n          <div className=\"user d-inline-block\">\r\n            <UncontrolledDropdown className=\"dropdown-menu-right\">\r\n              <DropdownToggle className=\"p-0\" color=\"empty\">\r\n                <span className=\"name mr-1\">Sarah Kortney</span>\r\n                <span>\r\n                  <img alt=\"Profile\" src=\"/assets/img/profile-pic-l.jpg\" />\r\n                </span>\r\n              </DropdownToggle>\r\n              <DropdownMenu className=\"mt-3\" right>\r\n                <DropdownItem>Account</DropdownItem>\r\n                <DropdownItem>Features</DropdownItem>\r\n                <DropdownItem>History</DropdownItem>\r\n                <DropdownItem>Support</DropdownItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem onClick={() => this.handleLogout()}>\r\n                  Sign out\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ menu, settings }) => {\r\n  const { containerClassnames, menuClickCount, selectedMenuHasSubItems } = menu;\r\n  const { locale } = settings;\r\n  return {\r\n    containerClassnames,\r\n    menuClickCount,\r\n    selectedMenuHasSubItems,\r\n    locale\r\n  };\r\n};\r\nexport default injectIntl(\r\n  connect(\r\n    mapStateToProps,\r\n    { setContainerClassnames, clickOnMobileMenu, changeLocale }\r\n  )(TopNav)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}