{"ast":null,"code":"/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * Reads in-band caption information from a video elementary\n * stream. Captions must follow the CEA-708 standard for injection\n * into an MPEG-2 transport streams.\n * @see https://en.wikipedia.org/wiki/CEA-708\n * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n */\n'use strict'; // -----------------\n// Link To Transport\n// -----------------\n\nvar Stream = require('../utils/stream');\n\nvar cea708Parser = require('../tools/caption-packet-parser');\n\nvar CaptionStream = function CaptionStream() {\n  CaptionStream.prototype.init.call(this);\n  this.captionPackets_ = [];\n  this.ccStreams_ = [new Cea608Stream(0, 0), // eslint-disable-line no-use-before-define\n  new Cea608Stream(0, 1), // eslint-disable-line no-use-before-define\n  new Cea608Stream(1, 0), // eslint-disable-line no-use-before-define\n  new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define\n  ];\n  this.reset(); // forward data and done events from CCs to this CaptionStream\n\n  this.ccStreams_.forEach(function (cc) {\n    cc.on('data', this.trigger.bind(this, 'data'));\n    cc.on('partialdone', this.trigger.bind(this, 'partialdone'));\n    cc.on('done', this.trigger.bind(this, 'done'));\n  }, this);\n};\n\nCaptionStream.prototype = new Stream();\n\nCaptionStream.prototype.push = function (event) {\n  var sei, userData, newCaptionPackets; // only examine SEI NALs\n\n  if (event.nalUnitType !== 'sei_rbsp') {\n    return;\n  } // parse the sei\n\n\n  sei = cea708Parser.parseSei(event.escapedRBSP); // ignore everything but user_data_registered_itu_t_t35\n\n  if (sei.payloadType !== cea708Parser.USER_DATA_REGISTERED_ITU_T_T35) {\n    return;\n  } // parse out the user data payload\n\n\n  userData = cea708Parser.parseUserData(sei); // ignore unrecognized userData\n\n  if (!userData) {\n    return;\n  } // Sometimes, the same segment # will be downloaded twice. To stop the\n  // caption data from being processed twice, we track the latest dts we've\n  // received and ignore everything with a dts before that. However, since\n  // data for a specific dts can be split across packets on either side of\n  // a segment boundary, we need to make sure we *don't* ignore the packets\n  // from the *next* segment that have dts === this.latestDts_. By constantly\n  // tracking the number of packets received with dts === this.latestDts_, we\n  // know how many should be ignored once we start receiving duplicates.\n\n\n  if (event.dts < this.latestDts_) {\n    // We've started getting older data, so set the flag.\n    this.ignoreNextEqualDts_ = true;\n    return;\n  } else if (event.dts === this.latestDts_ && this.ignoreNextEqualDts_) {\n    this.numSameDts_--;\n\n    if (!this.numSameDts_) {\n      // We've received the last duplicate packet, time to start processing again\n      this.ignoreNextEqualDts_ = false;\n    }\n\n    return;\n  } // parse out CC data packets and save them for later\n\n\n  newCaptionPackets = cea708Parser.parseCaptionPackets(event.pts, userData);\n  this.captionPackets_ = this.captionPackets_.concat(newCaptionPackets);\n\n  if (this.latestDts_ !== event.dts) {\n    this.numSameDts_ = 0;\n  }\n\n  this.numSameDts_++;\n  this.latestDts_ = event.dts;\n};\n\nCaptionStream.prototype.flushCCStreams = function (flushType) {\n  this.ccStreams_.forEach(function (cc) {\n    return flushType === 'flush' ? cc.flush() : cc.partialFlush();\n  }, this);\n};\n\nCaptionStream.prototype.flushStream = function (flushType) {\n  // make sure we actually parsed captions before proceeding\n  if (!this.captionPackets_.length) {\n    this.flushCCStreams(flushType);\n    return;\n  } // In Chrome, the Array#sort function is not stable so add a\n  // presortIndex that we can use to ensure we get a stable-sort\n\n\n  this.captionPackets_.forEach(function (elem, idx) {\n    elem.presortIndex = idx;\n  }); // sort caption byte-pairs based on their PTS values\n\n  this.captionPackets_.sort(function (a, b) {\n    if (a.pts === b.pts) {\n      return a.presortIndex - b.presortIndex;\n    }\n\n    return a.pts - b.pts;\n  });\n  this.captionPackets_.forEach(function (packet) {\n    if (packet.type < 2) {\n      // Dispatch packet to the right Cea608Stream\n      this.dispatchCea608Packet(packet);\n    } // this is where an 'else' would go for a dispatching packets\n    // to a theoretical Cea708Stream that handles SERVICEn data\n\n  }, this);\n  this.captionPackets_.length = 0;\n  this.flushCCStreams(flushType);\n};\n\nCaptionStream.prototype.flush = function () {\n  return this.flushStream('flush');\n}; // Only called if handling partial data\n\n\nCaptionStream.prototype.partialFlush = function () {\n  return this.flushStream('partialFlush');\n};\n\nCaptionStream.prototype.reset = function () {\n  this.latestDts_ = null;\n  this.ignoreNextEqualDts_ = false;\n  this.numSameDts_ = 0;\n  this.activeCea608Channel_ = [null, null];\n  this.ccStreams_.forEach(function (ccStream) {\n    ccStream.reset();\n  });\n}; // From the CEA-608 spec:\n\n/*\n * When XDS sub-packets are interleaved with other services, the end of each sub-packet shall be followed\n * by a control pair to change to a different service. When any of the control codes from 0x10 to 0x1F is\n * used to begin a control code pair, it indicates the return to captioning or Text data. The control code pair\n * and subsequent data should then be processed according to the FCC rules. It may be necessary for the\n * line 21 data encoder to automatically insert a control code pair (i.e. RCL, RU2, RU3, RU4, RDC, or RTD)\n * to switch to captioning or Text.\n*/\n// With that in mind, we ignore any data between an XDS control code and a\n// subsequent closed-captioning control code.\n\n\nCaptionStream.prototype.dispatchCea608Packet = function (packet) {\n  // NOTE: packet.type is the CEA608 field\n  if (this.setsTextOrXDSActive(packet)) {\n    this.activeCea608Channel_[packet.type] = null;\n  } else if (this.setsChannel1Active(packet)) {\n    this.activeCea608Channel_[packet.type] = 0;\n  } else if (this.setsChannel2Active(packet)) {\n    this.activeCea608Channel_[packet.type] = 1;\n  }\n\n  if (this.activeCea608Channel_[packet.type] === null) {\n    // If we haven't received anything to set the active channel, or the\n    // packets are Text/XDS data, discard the data; we don't want jumbled\n    // captions\n    return;\n  }\n\n  this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);\n};\n\nCaptionStream.prototype.setsChannel1Active = function (packet) {\n  return (packet.ccData & 0x7800) === 0x1000;\n};\n\nCaptionStream.prototype.setsChannel2Active = function (packet) {\n  return (packet.ccData & 0x7800) === 0x1800;\n};\n\nCaptionStream.prototype.setsTextOrXDSActive = function (packet) {\n  return (packet.ccData & 0x7100) === 0x0100 || (packet.ccData & 0x78fe) === 0x102a || (packet.ccData & 0x78fe) === 0x182a;\n}; // ----------------------\n// Session to Application\n// ----------------------\n// This hash maps non-ASCII, special, and extended character codes to their\n// proper Unicode equivalent. The first keys that are only a single byte\n// are the non-standard ASCII characters, which simply map the CEA608 byte\n// to the standard ASCII/Unicode. The two-byte keys that follow are the CEA608\n// character codes, but have their MSB bitmasked with 0x03 so that a lookup\n// can be performed regardless of the field and data channel on which the\n// character code was received.\n\n\nvar CHARACTER_TRANSLATION = {\n  0x2a: 0xe1,\n  // á\n  0x5c: 0xe9,\n  // é\n  0x5e: 0xed,\n  // í\n  0x5f: 0xf3,\n  // ó\n  0x60: 0xfa,\n  // ú\n  0x7b: 0xe7,\n  // ç\n  0x7c: 0xf7,\n  // ÷\n  0x7d: 0xd1,\n  // Ñ\n  0x7e: 0xf1,\n  // ñ\n  0x7f: 0x2588,\n  // █\n  0x0130: 0xae,\n  // ®\n  0x0131: 0xb0,\n  // °\n  0x0132: 0xbd,\n  // ½\n  0x0133: 0xbf,\n  // ¿\n  0x0134: 0x2122,\n  // ™\n  0x0135: 0xa2,\n  // ¢\n  0x0136: 0xa3,\n  // £\n  0x0137: 0x266a,\n  // ♪\n  0x0138: 0xe0,\n  // à\n  0x0139: 0xa0,\n  //\n  0x013a: 0xe8,\n  // è\n  0x013b: 0xe2,\n  // â\n  0x013c: 0xea,\n  // ê\n  0x013d: 0xee,\n  // î\n  0x013e: 0xf4,\n  // ô\n  0x013f: 0xfb,\n  // û\n  0x0220: 0xc1,\n  // Á\n  0x0221: 0xc9,\n  // É\n  0x0222: 0xd3,\n  // Ó\n  0x0223: 0xda,\n  // Ú\n  0x0224: 0xdc,\n  // Ü\n  0x0225: 0xfc,\n  // ü\n  0x0226: 0x2018,\n  // ‘\n  0x0227: 0xa1,\n  // ¡\n  0x0228: 0x2a,\n  // *\n  0x0229: 0x27,\n  // '\n  0x022a: 0x2014,\n  // —\n  0x022b: 0xa9,\n  // ©\n  0x022c: 0x2120,\n  // ℠\n  0x022d: 0x2022,\n  // •\n  0x022e: 0x201c,\n  // “\n  0x022f: 0x201d,\n  // ”\n  0x0230: 0xc0,\n  // À\n  0x0231: 0xc2,\n  // Â\n  0x0232: 0xc7,\n  // Ç\n  0x0233: 0xc8,\n  // È\n  0x0234: 0xca,\n  // Ê\n  0x0235: 0xcb,\n  // Ë\n  0x0236: 0xeb,\n  // ë\n  0x0237: 0xce,\n  // Î\n  0x0238: 0xcf,\n  // Ï\n  0x0239: 0xef,\n  // ï\n  0x023a: 0xd4,\n  // Ô\n  0x023b: 0xd9,\n  // Ù\n  0x023c: 0xf9,\n  // ù\n  0x023d: 0xdb,\n  // Û\n  0x023e: 0xab,\n  // «\n  0x023f: 0xbb,\n  // »\n  0x0320: 0xc3,\n  // Ã\n  0x0321: 0xe3,\n  // ã\n  0x0322: 0xcd,\n  // Í\n  0x0323: 0xcc,\n  // Ì\n  0x0324: 0xec,\n  // ì\n  0x0325: 0xd2,\n  // Ò\n  0x0326: 0xf2,\n  // ò\n  0x0327: 0xd5,\n  // Õ\n  0x0328: 0xf5,\n  // õ\n  0x0329: 0x7b,\n  // {\n  0x032a: 0x7d,\n  // }\n  0x032b: 0x5c,\n  // \\\n  0x032c: 0x5e,\n  // ^\n  0x032d: 0x5f,\n  // _\n  0x032e: 0x7c,\n  // |\n  0x032f: 0x7e,\n  // ~\n  0x0330: 0xc4,\n  // Ä\n  0x0331: 0xe4,\n  // ä\n  0x0332: 0xd6,\n  // Ö\n  0x0333: 0xf6,\n  // ö\n  0x0334: 0xdf,\n  // ß\n  0x0335: 0xa5,\n  // ¥\n  0x0336: 0xa4,\n  // ¤\n  0x0337: 0x2502,\n  // │\n  0x0338: 0xc5,\n  // Å\n  0x0339: 0xe5,\n  // å\n  0x033a: 0xd8,\n  // Ø\n  0x033b: 0xf8,\n  // ø\n  0x033c: 0x250c,\n  // ┌\n  0x033d: 0x2510,\n  // ┐\n  0x033e: 0x2514,\n  // └\n  0x033f: 0x2518 // ┘\n\n};\n\nvar getCharFromCode = function getCharFromCode(code) {\n  if (code === null) {\n    return '';\n  }\n\n  code = CHARACTER_TRANSLATION[code] || code;\n  return String.fromCharCode(code);\n}; // the index of the last row in a CEA-608 display buffer\n\n\nvar BOTTOM_ROW = 14; // This array is used for mapping PACs -> row #, since there's no way of\n// getting it through bit logic.\n\nvar ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620, 0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420]; // CEA-608 captions are rendered onto a 34x15 matrix of character\n// cells. The \"bottom\" row is the last element in the outer array.\n\nvar createDisplayBuffer = function createDisplayBuffer() {\n  var result = [],\n      i = BOTTOM_ROW + 1;\n\n  while (i--) {\n    result.push('');\n  }\n\n  return result;\n};\n\nvar Cea608Stream = function Cea608Stream(field, dataChannel) {\n  Cea608Stream.prototype.init.call(this);\n  this.field_ = field || 0;\n  this.dataChannel_ = dataChannel || 0;\n  this.name_ = 'CC' + ((this.field_ << 1 | this.dataChannel_) + 1);\n  this.setConstants();\n  this.reset();\n\n  this.push = function (packet) {\n    var data, swap, char0, char1, text; // remove the parity bits\n\n    data = packet.ccData & 0x7f7f; // ignore duplicate control codes; the spec demands they're sent twice\n\n    if (data === this.lastControlCode_) {\n      this.lastControlCode_ = null;\n      return;\n    } // Store control codes\n\n\n    if ((data & 0xf000) === 0x1000) {\n      this.lastControlCode_ = data;\n    } else if (data !== this.PADDING_) {\n      this.lastControlCode_ = null;\n    }\n\n    char0 = data >>> 8;\n    char1 = data & 0xff;\n\n    if (data === this.PADDING_) {\n      return;\n    } else if (data === this.RESUME_CAPTION_LOADING_) {\n      this.mode_ = 'popOn';\n    } else if (data === this.END_OF_CAPTION_) {\n      // If an EOC is received while in paint-on mode, the displayed caption\n      // text should be swapped to non-displayed memory as if it was a pop-on\n      // caption. Because of that, we should explicitly switch back to pop-on\n      // mode\n      this.mode_ = 'popOn';\n      this.clearFormatting(packet.pts); // if a caption was being displayed, it's gone now\n\n      this.flushDisplayed(packet.pts); // flip memory\n\n      swap = this.displayed_;\n      this.displayed_ = this.nonDisplayed_;\n      this.nonDisplayed_ = swap; // start measuring the time to display the caption\n\n      this.startPts_ = packet.pts;\n    } else if (data === this.ROLL_UP_2_ROWS_) {\n      this.rollUpRows_ = 2;\n      this.setRollUp(packet.pts);\n    } else if (data === this.ROLL_UP_3_ROWS_) {\n      this.rollUpRows_ = 3;\n      this.setRollUp(packet.pts);\n    } else if (data === this.ROLL_UP_4_ROWS_) {\n      this.rollUpRows_ = 4;\n      this.setRollUp(packet.pts);\n    } else if (data === this.CARRIAGE_RETURN_) {\n      this.clearFormatting(packet.pts);\n      this.flushDisplayed(packet.pts);\n      this.shiftRowsUp_();\n      this.startPts_ = packet.pts;\n    } else if (data === this.BACKSPACE_) {\n      if (this.mode_ === 'popOn') {\n        this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n      } else {\n        this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n      }\n    } else if (data === this.ERASE_DISPLAYED_MEMORY_) {\n      this.flushDisplayed(packet.pts);\n      this.displayed_ = createDisplayBuffer();\n    } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {\n      this.nonDisplayed_ = createDisplayBuffer();\n    } else if (data === this.RESUME_DIRECT_CAPTIONING_) {\n      if (this.mode_ !== 'paintOn') {\n        // NOTE: This should be removed when proper caption positioning is\n        // implemented\n        this.flushDisplayed(packet.pts);\n        this.displayed_ = createDisplayBuffer();\n      }\n\n      this.mode_ = 'paintOn';\n      this.startPts_ = packet.pts; // Append special characters to caption text\n    } else if (this.isSpecialCharacter(char0, char1)) {\n      // Bitmask char0 so that we can apply character transformations\n      // regardless of field and data channel.\n      // Then byte-shift to the left and OR with char1 so we can pass the\n      // entire character code to `getCharFromCode`.\n      char0 = (char0 & 0x03) << 8;\n      text = getCharFromCode(char0 | char1);\n      this[this.mode_](packet.pts, text);\n      this.column_++; // Append extended characters to caption text\n    } else if (this.isExtCharacter(char0, char1)) {\n      // Extended characters always follow their \"non-extended\" equivalents.\n      // IE if a \"è\" is desired, you'll always receive \"eè\"; non-compliant\n      // decoders are supposed to drop the \"è\", while compliant decoders\n      // backspace the \"e\" and insert \"è\".\n      // Delete the previous character\n      if (this.mode_ === 'popOn') {\n        this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n      } else {\n        this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n      } // Bitmask char0 so that we can apply character transformations\n      // regardless of field and data channel.\n      // Then byte-shift to the left and OR with char1 so we can pass the\n      // entire character code to `getCharFromCode`.\n\n\n      char0 = (char0 & 0x03) << 8;\n      text = getCharFromCode(char0 | char1);\n      this[this.mode_](packet.pts, text);\n      this.column_++; // Process mid-row codes\n    } else if (this.isMidRowCode(char0, char1)) {\n      // Attributes are not additive, so clear all formatting\n      this.clearFormatting(packet.pts); // According to the standard, mid-row codes\n      // should be replaced with spaces, so add one now\n\n      this[this.mode_](packet.pts, ' ');\n      this.column_++;\n\n      if ((char1 & 0xe) === 0xe) {\n        this.addFormatting(packet.pts, ['i']);\n      }\n\n      if ((char1 & 0x1) === 0x1) {\n        this.addFormatting(packet.pts, ['u']);\n      } // Detect offset control codes and adjust cursor\n\n    } else if (this.isOffsetControlCode(char0, char1)) {\n      // Cursor position is set by indent PAC (see below) in 4-column\n      // increments, with an additional offset code of 1-3 to reach any\n      // of the 32 columns specified by CEA-608. So all we need to do\n      // here is increment the column cursor by the given offset.\n      this.column_ += char1 & 0x03; // Detect PACs (Preamble Address Codes)\n    } else if (this.isPAC(char0, char1)) {\n      // There's no logic for PAC -> row mapping, so we have to just\n      // find the row code in an array and use its index :(\n      var row = ROWS.indexOf(data & 0x1f20); // Configure the caption window if we're in roll-up mode\n\n      if (this.mode_ === 'rollUp') {\n        // This implies that the base row is incorrectly set.\n        // As per the recommendation in CEA-608(Base Row Implementation), defer to the number\n        // of roll-up rows set.\n        if (row - this.rollUpRows_ + 1 < 0) {\n          row = this.rollUpRows_ - 1;\n        }\n\n        this.setRollUp(packet.pts, row);\n      }\n\n      if (row !== this.row_) {\n        // formatting is only persistent for current row\n        this.clearFormatting(packet.pts);\n        this.row_ = row;\n      } // All PACs can apply underline, so detect and apply\n      // (All odd-numbered second bytes set underline)\n\n\n      if (char1 & 0x1 && this.formatting_.indexOf('u') === -1) {\n        this.addFormatting(packet.pts, ['u']);\n      }\n\n      if ((data & 0x10) === 0x10) {\n        // We've got an indent level code. Each successive even number\n        // increments the column cursor by 4, so we can get the desired\n        // column position by bit-shifting to the right (to get n/2)\n        // and multiplying by 4.\n        this.column_ = ((data & 0xe) >> 1) * 4;\n      }\n\n      if (this.isColorPAC(char1)) {\n        // it's a color code, though we only support white, which\n        // can be either normal or italicized. white italics can be\n        // either 0x4e or 0x6e depending on the row, so we just\n        // bitwise-and with 0xe to see if italics should be turned on\n        if ((char1 & 0xe) === 0xe) {\n          this.addFormatting(packet.pts, ['i']);\n        }\n      } // We have a normal character in char0, and possibly one in char1\n\n    } else if (this.isNormalChar(char0)) {\n      if (char1 === 0x00) {\n        char1 = null;\n      }\n\n      text = getCharFromCode(char0);\n      text += getCharFromCode(char1);\n      this[this.mode_](packet.pts, text);\n      this.column_ += text.length;\n    } // finish data processing\n\n  };\n};\n\nCea608Stream.prototype = new Stream(); // Trigger a cue point that captures the current state of the\n// display buffer\n\nCea608Stream.prototype.flushDisplayed = function (pts) {\n  var content = this.displayed_ // remove spaces from the start and end of the string\n  .map(function (row) {\n    try {\n      return row.trim();\n    } catch (e) {\n      // Ordinarily, this shouldn't happen. However, caption\n      // parsing errors should not throw exceptions and\n      // break playback.\n      // eslint-disable-next-line no-console\n      console.error('Skipping malformed caption.');\n      return '';\n    }\n  }) // combine all text rows to display in one cue\n  .join('\\n') // and remove blank rows from the start and end, but not the middle\n  .replace(/^\\n+|\\n+$/g, '');\n\n  if (content.length) {\n    this.trigger('data', {\n      startPts: this.startPts_,\n      endPts: pts,\n      text: content,\n      stream: this.name_\n    });\n  }\n};\n/**\n * Zero out the data, used for startup and on seek\n */\n\n\nCea608Stream.prototype.reset = function () {\n  this.mode_ = 'popOn'; // When in roll-up mode, the index of the last row that will\n  // actually display captions. If a caption is shifted to a row\n  // with a lower index than this, it is cleared from the display\n  // buffer\n\n  this.topRow_ = 0;\n  this.startPts_ = 0;\n  this.displayed_ = createDisplayBuffer();\n  this.nonDisplayed_ = createDisplayBuffer();\n  this.lastControlCode_ = null; // Track row and column for proper line-breaking and spacing\n\n  this.column_ = 0;\n  this.row_ = BOTTOM_ROW;\n  this.rollUpRows_ = 2; // This variable holds currently-applied formatting\n\n  this.formatting_ = [];\n};\n/**\n * Sets up control code and related constants for this instance\n */\n\n\nCea608Stream.prototype.setConstants = function () {\n  // The following attributes have these uses:\n  // ext_ :    char0 for mid-row codes, and the base for extended\n  //           chars (ext_+0, ext_+1, and ext_+2 are char0s for\n  //           extended codes)\n  // control_: char0 for control codes, except byte-shifted to the\n  //           left so that we can do this.control_ | CONTROL_CODE\n  // offset_:  char0 for tab offset codes\n  //\n  // It's also worth noting that control codes, and _only_ control codes,\n  // differ between field 1 and field2. Field 2 control codes are always\n  // their field 1 value plus 1. That's why there's the \"| field\" on the\n  // control value.\n  if (this.dataChannel_ === 0) {\n    this.BASE_ = 0x10;\n    this.EXT_ = 0x11;\n    this.CONTROL_ = (0x14 | this.field_) << 8;\n    this.OFFSET_ = 0x17;\n  } else if (this.dataChannel_ === 1) {\n    this.BASE_ = 0x18;\n    this.EXT_ = 0x19;\n    this.CONTROL_ = (0x1c | this.field_) << 8;\n    this.OFFSET_ = 0x1f;\n  } // Constants for the LSByte command codes recognized by Cea608Stream. This\n  // list is not exhaustive. For a more comprehensive listing and semantics see\n  // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf\n  // Padding\n\n\n  this.PADDING_ = 0x0000; // Pop-on Mode\n\n  this.RESUME_CAPTION_LOADING_ = this.CONTROL_ | 0x20;\n  this.END_OF_CAPTION_ = this.CONTROL_ | 0x2f; // Roll-up Mode\n\n  this.ROLL_UP_2_ROWS_ = this.CONTROL_ | 0x25;\n  this.ROLL_UP_3_ROWS_ = this.CONTROL_ | 0x26;\n  this.ROLL_UP_4_ROWS_ = this.CONTROL_ | 0x27;\n  this.CARRIAGE_RETURN_ = this.CONTROL_ | 0x2d; // paint-on mode\n\n  this.RESUME_DIRECT_CAPTIONING_ = this.CONTROL_ | 0x29; // Erasure\n\n  this.BACKSPACE_ = this.CONTROL_ | 0x21;\n  this.ERASE_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2c;\n  this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;\n};\n/**\n * Detects if the 2-byte packet data is a special character\n *\n * Special characters have a second byte in the range 0x30 to 0x3f,\n * with the first byte being 0x11 (for data channel 1) or 0x19 (for\n * data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an special character\n */\n\n\nCea608Stream.prototype.isSpecialCharacter = function (char0, char1) {\n  return char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f;\n};\n/**\n * Detects if the 2-byte packet data is an extended character\n *\n * Extended characters have a second byte in the range 0x20 to 0x3f,\n * with the first byte being 0x12 or 0x13 (for data channel 1) or\n * 0x1a or 0x1b (for data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an extended character\n */\n\n\nCea608Stream.prototype.isExtCharacter = function (char0, char1) {\n  return (char0 === this.EXT_ + 1 || char0 === this.EXT_ + 2) && char1 >= 0x20 && char1 <= 0x3f;\n};\n/**\n * Detects if the 2-byte packet is a mid-row code\n *\n * Mid-row codes have a second byte in the range 0x20 to 0x2f, with\n * the first byte being 0x11 (for data channel 1) or 0x19 (for data\n * channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are a mid-row code\n */\n\n\nCea608Stream.prototype.isMidRowCode = function (char0, char1) {\n  return char0 === this.EXT_ && char1 >= 0x20 && char1 <= 0x2f;\n};\n/**\n * Detects if the 2-byte packet is an offset control code\n *\n * Offset control codes have a second byte in the range 0x21 to 0x23,\n * with the first byte being 0x17 (for data channel 1) or 0x1f (for\n * data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an offset control code\n */\n\n\nCea608Stream.prototype.isOffsetControlCode = function (char0, char1) {\n  return char0 === this.OFFSET_ && char1 >= 0x21 && char1 <= 0x23;\n};\n/**\n * Detects if the 2-byte packet is a Preamble Address Code\n *\n * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)\n * or 0x18 to 0x1f (for data channel 2), with the second byte in the\n * range 0x40 to 0x7f.\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are a PAC\n */\n\n\nCea608Stream.prototype.isPAC = function (char0, char1) {\n  return char0 >= this.BASE_ && char0 < this.BASE_ + 8 && char1 >= 0x40 && char1 <= 0x7f;\n};\n/**\n * Detects if a packet's second byte is in the range of a PAC color code\n *\n * PAC color codes have the second byte be in the range 0x40 to 0x4f, or\n * 0x60 to 0x6f.\n *\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the byte is a color PAC\n */\n\n\nCea608Stream.prototype.isColorPAC = function (char1) {\n  return char1 >= 0x40 && char1 <= 0x4f || char1 >= 0x60 && char1 <= 0x7f;\n};\n/**\n * Detects if a single byte is in the range of a normal character\n *\n * Normal text bytes are in the range 0x20 to 0x7f.\n *\n * @param  {Integer} char  The byte\n * @return {Boolean}       Whether the byte is a normal character\n */\n\n\nCea608Stream.prototype.isNormalChar = function (char) {\n  return char >= 0x20 && char <= 0x7f;\n};\n/**\n * Configures roll-up\n *\n * @param  {Integer} pts         Current PTS\n * @param  {Integer} newBaseRow  Used by PACs to slide the current window to\n *                               a new position\n */\n\n\nCea608Stream.prototype.setRollUp = function (pts, newBaseRow) {\n  // Reset the base row to the bottom row when switching modes\n  if (this.mode_ !== 'rollUp') {\n    this.row_ = BOTTOM_ROW;\n    this.mode_ = 'rollUp'; // Spec says to wipe memories when switching to roll-up\n\n    this.flushDisplayed(pts);\n    this.nonDisplayed_ = createDisplayBuffer();\n    this.displayed_ = createDisplayBuffer();\n  }\n\n  if (newBaseRow !== undefined && newBaseRow !== this.row_) {\n    // move currently displayed captions (up or down) to the new base row\n    for (var i = 0; i < this.rollUpRows_; i++) {\n      this.displayed_[newBaseRow - i] = this.displayed_[this.row_ - i];\n      this.displayed_[this.row_ - i] = '';\n    }\n  }\n\n  if (newBaseRow === undefined) {\n    newBaseRow = this.row_;\n  }\n\n  this.topRow_ = newBaseRow - this.rollUpRows_ + 1;\n}; // Adds the opening HTML tag for the passed character to the caption text,\n// and keeps track of it for later closing\n\n\nCea608Stream.prototype.addFormatting = function (pts, format) {\n  this.formatting_ = this.formatting_.concat(format);\n  var text = format.reduce(function (text, format) {\n    return text + '<' + format + '>';\n  }, '');\n  this[this.mode_](pts, text);\n}; // Adds HTML closing tags for current formatting to caption text and\n// clears remembered formatting\n\n\nCea608Stream.prototype.clearFormatting = function (pts) {\n  if (!this.formatting_.length) {\n    return;\n  }\n\n  var text = this.formatting_.reverse().reduce(function (text, format) {\n    return text + '</' + format + '>';\n  }, '');\n  this.formatting_ = [];\n  this[this.mode_](pts, text);\n}; // Mode Implementations\n\n\nCea608Stream.prototype.popOn = function (pts, text) {\n  var baseRow = this.nonDisplayed_[this.row_]; // buffer characters\n\n  baseRow += text;\n  this.nonDisplayed_[this.row_] = baseRow;\n};\n\nCea608Stream.prototype.rollUp = function (pts, text) {\n  var baseRow = this.displayed_[this.row_];\n  baseRow += text;\n  this.displayed_[this.row_] = baseRow;\n};\n\nCea608Stream.prototype.shiftRowsUp_ = function () {\n  var i; // clear out inactive rows\n\n  for (i = 0; i < this.topRow_; i++) {\n    this.displayed_[i] = '';\n  }\n\n  for (i = this.row_ + 1; i < BOTTOM_ROW + 1; i++) {\n    this.displayed_[i] = '';\n  } // shift displayed rows up\n\n\n  for (i = this.topRow_; i < this.row_; i++) {\n    this.displayed_[i] = this.displayed_[i + 1];\n  } // clear out the bottom row\n\n\n  this.displayed_[this.row_] = '';\n};\n\nCea608Stream.prototype.paintOn = function (pts, text) {\n  var baseRow = this.displayed_[this.row_];\n  baseRow += text;\n  this.displayed_[this.row_] = baseRow;\n}; // exports\n\n\nmodule.exports = {\n  CaptionStream: CaptionStream,\n  Cea608Stream: Cea608Stream\n};","map":{"version":3,"sources":["/Users/soier/Code/studio_v_shawn/studio_v2/node_modules/mux.js/lib/m2ts/caption-stream.js"],"names":["Stream","require","cea708Parser","CaptionStream","prototype","init","call","captionPackets_","ccStreams_","Cea608Stream","reset","forEach","cc","on","trigger","bind","push","event","sei","userData","newCaptionPackets","nalUnitType","parseSei","escapedRBSP","payloadType","USER_DATA_REGISTERED_ITU_T_T35","parseUserData","dts","latestDts_","ignoreNextEqualDts_","numSameDts_","parseCaptionPackets","pts","concat","flushCCStreams","flushType","flush","partialFlush","flushStream","length","elem","idx","presortIndex","sort","a","b","packet","type","dispatchCea608Packet","activeCea608Channel_","ccStream","setsTextOrXDSActive","setsChannel1Active","setsChannel2Active","ccData","CHARACTER_TRANSLATION","getCharFromCode","code","String","fromCharCode","BOTTOM_ROW","ROWS","createDisplayBuffer","result","i","field","dataChannel","field_","dataChannel_","name_","setConstants","data","swap","char0","char1","text","lastControlCode_","PADDING_","RESUME_CAPTION_LOADING_","mode_","END_OF_CAPTION_","clearFormatting","flushDisplayed","displayed_","nonDisplayed_","startPts_","ROLL_UP_2_ROWS_","rollUpRows_","setRollUp","ROLL_UP_3_ROWS_","ROLL_UP_4_ROWS_","CARRIAGE_RETURN_","shiftRowsUp_","BACKSPACE_","row_","slice","ERASE_DISPLAYED_MEMORY_","ERASE_NON_DISPLAYED_MEMORY_","RESUME_DIRECT_CAPTIONING_","isSpecialCharacter","column_","isExtCharacter","isMidRowCode","addFormatting","isOffsetControlCode","isPAC","row","indexOf","formatting_","isColorPAC","isNormalChar","content","map","trim","e","console","error","join","replace","startPts","endPts","stream","topRow_","BASE_","EXT_","CONTROL_","OFFSET_","char","newBaseRow","undefined","format","reduce","reverse","popOn","baseRow","rollUp","paintOn","module","exports"],"mappings":"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","sourcesContent":["/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n *\n * Reads in-band caption information from a video elementary\n * stream. Captions must follow the CEA-708 standard for injection\n * into an MPEG-2 transport streams.\n * @see https://en.wikipedia.org/wiki/CEA-708\n * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n */\n\n'use strict';\n\n// -----------------\n// Link To Transport\n// -----------------\n\nvar Stream = require('../utils/stream');\nvar cea708Parser = require('../tools/caption-packet-parser');\n\nvar CaptionStream = function() {\n\n  CaptionStream.prototype.init.call(this);\n\n  this.captionPackets_ = [];\n\n  this.ccStreams_ = [\n    new Cea608Stream(0, 0), // eslint-disable-line no-use-before-define\n    new Cea608Stream(0, 1), // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 0), // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define\n  ];\n\n  this.reset();\n\n  // forward data and done events from CCs to this CaptionStream\n  this.ccStreams_.forEach(function(cc) {\n    cc.on('data', this.trigger.bind(this, 'data'));\n    cc.on('partialdone', this.trigger.bind(this, 'partialdone'));\n    cc.on('done', this.trigger.bind(this, 'done'));\n  }, this);\n\n};\n\nCaptionStream.prototype = new Stream();\nCaptionStream.prototype.push = function(event) {\n  var sei, userData, newCaptionPackets;\n\n  // only examine SEI NALs\n  if (event.nalUnitType !== 'sei_rbsp') {\n    return;\n  }\n\n  // parse the sei\n  sei = cea708Parser.parseSei(event.escapedRBSP);\n\n  // ignore everything but user_data_registered_itu_t_t35\n  if (sei.payloadType !== cea708Parser.USER_DATA_REGISTERED_ITU_T_T35) {\n    return;\n  }\n\n  // parse out the user data payload\n  userData = cea708Parser.parseUserData(sei);\n\n  // ignore unrecognized userData\n  if (!userData) {\n    return;\n  }\n\n  // Sometimes, the same segment # will be downloaded twice. To stop the\n  // caption data from being processed twice, we track the latest dts we've\n  // received and ignore everything with a dts before that. However, since\n  // data for a specific dts can be split across packets on either side of\n  // a segment boundary, we need to make sure we *don't* ignore the packets\n  // from the *next* segment that have dts === this.latestDts_. By constantly\n  // tracking the number of packets received with dts === this.latestDts_, we\n  // know how many should be ignored once we start receiving duplicates.\n  if (event.dts < this.latestDts_) {\n    // We've started getting older data, so set the flag.\n    this.ignoreNextEqualDts_ = true;\n    return;\n  } else if ((event.dts === this.latestDts_) && (this.ignoreNextEqualDts_)) {\n    this.numSameDts_--;\n    if (!this.numSameDts_) {\n      // We've received the last duplicate packet, time to start processing again\n      this.ignoreNextEqualDts_ = false;\n    }\n    return;\n  }\n\n  // parse out CC data packets and save them for later\n  newCaptionPackets = cea708Parser.parseCaptionPackets(event.pts, userData);\n  this.captionPackets_ = this.captionPackets_.concat(newCaptionPackets);\n  if (this.latestDts_ !== event.dts) {\n    this.numSameDts_ = 0;\n  }\n  this.numSameDts_++;\n  this.latestDts_ = event.dts;\n};\n\nCaptionStream.prototype.flushCCStreams = function(flushType) {\n  this.ccStreams_.forEach(function(cc) {\n    return flushType === 'flush' ? cc.flush() : cc.partialFlush();\n  }, this);\n};\n\nCaptionStream.prototype.flushStream = function(flushType) {\n  // make sure we actually parsed captions before proceeding\n  if (!this.captionPackets_.length) {\n    this.flushCCStreams(flushType);\n    return;\n  }\n\n  // In Chrome, the Array#sort function is not stable so add a\n  // presortIndex that we can use to ensure we get a stable-sort\n  this.captionPackets_.forEach(function(elem, idx) {\n    elem.presortIndex = idx;\n  });\n\n  // sort caption byte-pairs based on their PTS values\n  this.captionPackets_.sort(function(a, b) {\n    if (a.pts === b.pts) {\n      return a.presortIndex - b.presortIndex;\n    }\n    return a.pts - b.pts;\n  });\n\n  this.captionPackets_.forEach(function(packet) {\n    if (packet.type < 2) {\n      // Dispatch packet to the right Cea608Stream\n      this.dispatchCea608Packet(packet);\n    }\n    // this is where an 'else' would go for a dispatching packets\n    // to a theoretical Cea708Stream that handles SERVICEn data\n  }, this);\n\n  this.captionPackets_.length = 0;\n  this.flushCCStreams(flushType);\n};\n\nCaptionStream.prototype.flush = function() {\n  return this.flushStream('flush');\n};\n\n// Only called if handling partial data\nCaptionStream.prototype.partialFlush = function() {\n  return this.flushStream('partialFlush');\n};\n\nCaptionStream.prototype.reset = function() {\n  this.latestDts_ = null;\n  this.ignoreNextEqualDts_ = false;\n  this.numSameDts_ = 0;\n  this.activeCea608Channel_ = [null, null];\n  this.ccStreams_.forEach(function(ccStream) {\n    ccStream.reset();\n  });\n};\n\n// From the CEA-608 spec:\n/*\n * When XDS sub-packets are interleaved with other services, the end of each sub-packet shall be followed\n * by a control pair to change to a different service. When any of the control codes from 0x10 to 0x1F is\n * used to begin a control code pair, it indicates the return to captioning or Text data. The control code pair\n * and subsequent data should then be processed according to the FCC rules. It may be necessary for the\n * line 21 data encoder to automatically insert a control code pair (i.e. RCL, RU2, RU3, RU4, RDC, or RTD)\n * to switch to captioning or Text.\n*/\n// With that in mind, we ignore any data between an XDS control code and a\n// subsequent closed-captioning control code.\nCaptionStream.prototype.dispatchCea608Packet = function(packet) {\n  // NOTE: packet.type is the CEA608 field\n  if (this.setsTextOrXDSActive(packet)) {\n    this.activeCea608Channel_[packet.type] = null;\n  } else if (this.setsChannel1Active(packet)) {\n    this.activeCea608Channel_[packet.type] = 0;\n  } else if (this.setsChannel2Active(packet)) {\n    this.activeCea608Channel_[packet.type] = 1;\n  }\n  if (this.activeCea608Channel_[packet.type] === null) {\n    // If we haven't received anything to set the active channel, or the\n    // packets are Text/XDS data, discard the data; we don't want jumbled\n    // captions\n    return;\n  }\n  this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);\n};\n\nCaptionStream.prototype.setsChannel1Active = function(packet) {\n  return ((packet.ccData & 0x7800) === 0x1000);\n};\nCaptionStream.prototype.setsChannel2Active = function(packet) {\n  return ((packet.ccData & 0x7800) === 0x1800);\n};\nCaptionStream.prototype.setsTextOrXDSActive = function(packet) {\n  return ((packet.ccData & 0x7100) === 0x0100) ||\n    ((packet.ccData & 0x78fe) === 0x102a) ||\n    ((packet.ccData & 0x78fe) === 0x182a);\n};\n\n// ----------------------\n// Session to Application\n// ----------------------\n\n// This hash maps non-ASCII, special, and extended character codes to their\n// proper Unicode equivalent. The first keys that are only a single byte\n// are the non-standard ASCII characters, which simply map the CEA608 byte\n// to the standard ASCII/Unicode. The two-byte keys that follow are the CEA608\n// character codes, but have their MSB bitmasked with 0x03 so that a lookup\n// can be performed regardless of the field and data channel on which the\n// character code was received.\nvar CHARACTER_TRANSLATION = {\n  0x2a: 0xe1,     // á\n  0x5c: 0xe9,     // é\n  0x5e: 0xed,     // í\n  0x5f: 0xf3,     // ó\n  0x60: 0xfa,     // ú\n  0x7b: 0xe7,     // ç\n  0x7c: 0xf7,     // ÷\n  0x7d: 0xd1,     // Ñ\n  0x7e: 0xf1,     // ñ\n  0x7f: 0x2588,   // █\n  0x0130: 0xae,   // ®\n  0x0131: 0xb0,   // °\n  0x0132: 0xbd,   // ½\n  0x0133: 0xbf,   // ¿\n  0x0134: 0x2122, // ™\n  0x0135: 0xa2,   // ¢\n  0x0136: 0xa3,   // £\n  0x0137: 0x266a, // ♪\n  0x0138: 0xe0,   // à\n  0x0139: 0xa0,   //\n  0x013a: 0xe8,   // è\n  0x013b: 0xe2,   // â\n  0x013c: 0xea,   // ê\n  0x013d: 0xee,   // î\n  0x013e: 0xf4,   // ô\n  0x013f: 0xfb,   // û\n  0x0220: 0xc1,   // Á\n  0x0221: 0xc9,   // É\n  0x0222: 0xd3,   // Ó\n  0x0223: 0xda,   // Ú\n  0x0224: 0xdc,   // Ü\n  0x0225: 0xfc,   // ü\n  0x0226: 0x2018, // ‘\n  0x0227: 0xa1,   // ¡\n  0x0228: 0x2a,   // *\n  0x0229: 0x27,   // '\n  0x022a: 0x2014, // —\n  0x022b: 0xa9,   // ©\n  0x022c: 0x2120, // ℠\n  0x022d: 0x2022, // •\n  0x022e: 0x201c, // “\n  0x022f: 0x201d, // ”\n  0x0230: 0xc0,   // À\n  0x0231: 0xc2,   // Â\n  0x0232: 0xc7,   // Ç\n  0x0233: 0xc8,   // È\n  0x0234: 0xca,   // Ê\n  0x0235: 0xcb,   // Ë\n  0x0236: 0xeb,   // ë\n  0x0237: 0xce,   // Î\n  0x0238: 0xcf,   // Ï\n  0x0239: 0xef,   // ï\n  0x023a: 0xd4,   // Ô\n  0x023b: 0xd9,   // Ù\n  0x023c: 0xf9,   // ù\n  0x023d: 0xdb,   // Û\n  0x023e: 0xab,   // «\n  0x023f: 0xbb,   // »\n  0x0320: 0xc3,   // Ã\n  0x0321: 0xe3,   // ã\n  0x0322: 0xcd,   // Í\n  0x0323: 0xcc,   // Ì\n  0x0324: 0xec,   // ì\n  0x0325: 0xd2,   // Ò\n  0x0326: 0xf2,   // ò\n  0x0327: 0xd5,   // Õ\n  0x0328: 0xf5,   // õ\n  0x0329: 0x7b,   // {\n  0x032a: 0x7d,   // }\n  0x032b: 0x5c,   // \\\n  0x032c: 0x5e,   // ^\n  0x032d: 0x5f,   // _\n  0x032e: 0x7c,   // |\n  0x032f: 0x7e,   // ~\n  0x0330: 0xc4,   // Ä\n  0x0331: 0xe4,   // ä\n  0x0332: 0xd6,   // Ö\n  0x0333: 0xf6,   // ö\n  0x0334: 0xdf,   // ß\n  0x0335: 0xa5,   // ¥\n  0x0336: 0xa4,   // ¤\n  0x0337: 0x2502, // │\n  0x0338: 0xc5,   // Å\n  0x0339: 0xe5,   // å\n  0x033a: 0xd8,   // Ø\n  0x033b: 0xf8,   // ø\n  0x033c: 0x250c, // ┌\n  0x033d: 0x2510, // ┐\n  0x033e: 0x2514, // └\n  0x033f: 0x2518  // ┘\n};\n\nvar getCharFromCode = function(code) {\n  if (code === null) {\n    return '';\n  }\n  code = CHARACTER_TRANSLATION[code] || code;\n  return String.fromCharCode(code);\n};\n\n// the index of the last row in a CEA-608 display buffer\nvar BOTTOM_ROW = 14;\n\n// This array is used for mapping PACs -> row #, since there's no way of\n// getting it through bit logic.\nvar ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620,\n            0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420];\n\n// CEA-608 captions are rendered onto a 34x15 matrix of character\n// cells. The \"bottom\" row is the last element in the outer array.\nvar createDisplayBuffer = function() {\n  var result = [], i = BOTTOM_ROW + 1;\n  while (i--) {\n    result.push('');\n  }\n  return result;\n};\n\nvar Cea608Stream = function(field, dataChannel) {\n  Cea608Stream.prototype.init.call(this);\n\n  this.field_ = field || 0;\n  this.dataChannel_ = dataChannel || 0;\n\n  this.name_ = 'CC' + (((this.field_ << 1) | this.dataChannel_) + 1);\n\n  this.setConstants();\n  this.reset();\n\n  this.push = function(packet) {\n    var data, swap, char0, char1, text;\n    // remove the parity bits\n    data = packet.ccData & 0x7f7f;\n\n    // ignore duplicate control codes; the spec demands they're sent twice\n    if (data === this.lastControlCode_) {\n      this.lastControlCode_ = null;\n      return;\n    }\n\n    // Store control codes\n    if ((data & 0xf000) === 0x1000) {\n      this.lastControlCode_ = data;\n    } else if (data !== this.PADDING_) {\n      this.lastControlCode_ = null;\n    }\n\n    char0 = data >>> 8;\n    char1 = data & 0xff;\n\n    if (data === this.PADDING_) {\n      return;\n\n    } else if (data === this.RESUME_CAPTION_LOADING_) {\n      this.mode_ = 'popOn';\n\n    } else if (data === this.END_OF_CAPTION_) {\n      // If an EOC is received while in paint-on mode, the displayed caption\n      // text should be swapped to non-displayed memory as if it was a pop-on\n      // caption. Because of that, we should explicitly switch back to pop-on\n      // mode\n      this.mode_ = 'popOn';\n      this.clearFormatting(packet.pts);\n      // if a caption was being displayed, it's gone now\n      this.flushDisplayed(packet.pts);\n\n      // flip memory\n      swap = this.displayed_;\n      this.displayed_ = this.nonDisplayed_;\n      this.nonDisplayed_ = swap;\n\n      // start measuring the time to display the caption\n      this.startPts_ = packet.pts;\n\n    } else if (data === this.ROLL_UP_2_ROWS_) {\n      this.rollUpRows_ = 2;\n      this.setRollUp(packet.pts);\n    } else if (data === this.ROLL_UP_3_ROWS_) {\n      this.rollUpRows_ = 3;\n      this.setRollUp(packet.pts);\n    } else if (data === this.ROLL_UP_4_ROWS_) {\n      this.rollUpRows_ = 4;\n      this.setRollUp(packet.pts);\n    } else if (data === this.CARRIAGE_RETURN_) {\n      this.clearFormatting(packet.pts);\n      this.flushDisplayed(packet.pts);\n      this.shiftRowsUp_();\n      this.startPts_ = packet.pts;\n\n    } else if (data === this.BACKSPACE_) {\n      if (this.mode_ === 'popOn') {\n        this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n      } else {\n        this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n      }\n    } else if (data === this.ERASE_DISPLAYED_MEMORY_) {\n      this.flushDisplayed(packet.pts);\n      this.displayed_ = createDisplayBuffer();\n    } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {\n      this.nonDisplayed_ = createDisplayBuffer();\n\n    } else if (data === this.RESUME_DIRECT_CAPTIONING_) {\n      if (this.mode_ !== 'paintOn') {\n        // NOTE: This should be removed when proper caption positioning is\n        // implemented\n        this.flushDisplayed(packet.pts);\n        this.displayed_ = createDisplayBuffer();\n      }\n      this.mode_ = 'paintOn';\n      this.startPts_ = packet.pts;\n\n    // Append special characters to caption text\n    } else if (this.isSpecialCharacter(char0, char1)) {\n      // Bitmask char0 so that we can apply character transformations\n      // regardless of field and data channel.\n      // Then byte-shift to the left and OR with char1 so we can pass the\n      // entire character code to `getCharFromCode`.\n      char0 = (char0 & 0x03) << 8;\n      text = getCharFromCode(char0 | char1);\n      this[this.mode_](packet.pts, text);\n      this.column_++;\n\n    // Append extended characters to caption text\n    } else if (this.isExtCharacter(char0, char1)) {\n      // Extended characters always follow their \"non-extended\" equivalents.\n      // IE if a \"è\" is desired, you'll always receive \"eè\"; non-compliant\n      // decoders are supposed to drop the \"è\", while compliant decoders\n      // backspace the \"e\" and insert \"è\".\n\n      // Delete the previous character\n      if (this.mode_ === 'popOn') {\n        this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n      } else {\n        this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n      }\n\n      // Bitmask char0 so that we can apply character transformations\n      // regardless of field and data channel.\n      // Then byte-shift to the left and OR with char1 so we can pass the\n      // entire character code to `getCharFromCode`.\n      char0 = (char0 & 0x03) << 8;\n      text = getCharFromCode(char0 | char1);\n      this[this.mode_](packet.pts, text);\n      this.column_++;\n\n    // Process mid-row codes\n    } else if (this.isMidRowCode(char0, char1)) {\n      // Attributes are not additive, so clear all formatting\n      this.clearFormatting(packet.pts);\n\n      // According to the standard, mid-row codes\n      // should be replaced with spaces, so add one now\n      this[this.mode_](packet.pts, ' ');\n      this.column_++;\n\n      if ((char1 & 0xe) === 0xe) {\n        this.addFormatting(packet.pts, ['i']);\n      }\n\n      if ((char1 & 0x1) === 0x1) {\n        this.addFormatting(packet.pts, ['u']);\n      }\n\n    // Detect offset control codes and adjust cursor\n    } else if (this.isOffsetControlCode(char0, char1)) {\n      // Cursor position is set by indent PAC (see below) in 4-column\n      // increments, with an additional offset code of 1-3 to reach any\n      // of the 32 columns specified by CEA-608. So all we need to do\n      // here is increment the column cursor by the given offset.\n      this.column_ += (char1 & 0x03);\n\n    // Detect PACs (Preamble Address Codes)\n    } else if (this.isPAC(char0, char1)) {\n\n      // There's no logic for PAC -> row mapping, so we have to just\n      // find the row code in an array and use its index :(\n      var row = ROWS.indexOf(data & 0x1f20);\n\n      // Configure the caption window if we're in roll-up mode\n      if (this.mode_ === 'rollUp') {\n        // This implies that the base row is incorrectly set.\n        // As per the recommendation in CEA-608(Base Row Implementation), defer to the number\n        // of roll-up rows set.\n        if (row - this.rollUpRows_ + 1 < 0) {\n          row = this.rollUpRows_ - 1;\n        }\n\n        this.setRollUp(packet.pts, row);\n      }\n\n      if (row !== this.row_) {\n        // formatting is only persistent for current row\n        this.clearFormatting(packet.pts);\n        this.row_ = row;\n      }\n      // All PACs can apply underline, so detect and apply\n      // (All odd-numbered second bytes set underline)\n      if ((char1 & 0x1) && (this.formatting_.indexOf('u') === -1)) {\n          this.addFormatting(packet.pts, ['u']);\n      }\n\n      if ((data & 0x10) === 0x10) {\n        // We've got an indent level code. Each successive even number\n        // increments the column cursor by 4, so we can get the desired\n        // column position by bit-shifting to the right (to get n/2)\n        // and multiplying by 4.\n        this.column_ = ((data & 0xe) >> 1) * 4;\n      }\n\n      if (this.isColorPAC(char1)) {\n        // it's a color code, though we only support white, which\n        // can be either normal or italicized. white italics can be\n        // either 0x4e or 0x6e depending on the row, so we just\n        // bitwise-and with 0xe to see if italics should be turned on\n        if ((char1 & 0xe) === 0xe) {\n          this.addFormatting(packet.pts, ['i']);\n        }\n      }\n\n    // We have a normal character in char0, and possibly one in char1\n    } else if (this.isNormalChar(char0)) {\n      if (char1 === 0x00) {\n        char1 = null;\n      }\n      text = getCharFromCode(char0);\n      text += getCharFromCode(char1);\n      this[this.mode_](packet.pts, text);\n      this.column_ += text.length;\n\n    } // finish data processing\n\n  };\n};\nCea608Stream.prototype = new Stream();\n// Trigger a cue point that captures the current state of the\n// display buffer\nCea608Stream.prototype.flushDisplayed = function(pts) {\n  var content = this.displayed_\n    // remove spaces from the start and end of the string\n    .map(function(row) {\n      try {\n        return row.trim();\n      } catch (e) {\n        // Ordinarily, this shouldn't happen. However, caption\n        // parsing errors should not throw exceptions and\n        // break playback.\n        // eslint-disable-next-line no-console\n        console.error('Skipping malformed caption.');\n        return '';\n      }\n    })\n    // combine all text rows to display in one cue\n    .join('\\n')\n    // and remove blank rows from the start and end, but not the middle\n    .replace(/^\\n+|\\n+$/g, '');\n\n  if (content.length) {\n    this.trigger('data', {\n      startPts: this.startPts_,\n      endPts: pts,\n      text: content,\n      stream: this.name_\n    });\n  }\n};\n\n/**\n * Zero out the data, used for startup and on seek\n */\nCea608Stream.prototype.reset = function() {\n  this.mode_ = 'popOn';\n  // When in roll-up mode, the index of the last row that will\n  // actually display captions. If a caption is shifted to a row\n  // with a lower index than this, it is cleared from the display\n  // buffer\n  this.topRow_ = 0;\n  this.startPts_ = 0;\n  this.displayed_ = createDisplayBuffer();\n  this.nonDisplayed_ = createDisplayBuffer();\n  this.lastControlCode_ = null;\n\n  // Track row and column for proper line-breaking and spacing\n  this.column_ = 0;\n  this.row_ = BOTTOM_ROW;\n  this.rollUpRows_ = 2;\n\n  // This variable holds currently-applied formatting\n  this.formatting_ = [];\n};\n\n/**\n * Sets up control code and related constants for this instance\n */\nCea608Stream.prototype.setConstants = function() {\n  // The following attributes have these uses:\n  // ext_ :    char0 for mid-row codes, and the base for extended\n  //           chars (ext_+0, ext_+1, and ext_+2 are char0s for\n  //           extended codes)\n  // control_: char0 for control codes, except byte-shifted to the\n  //           left so that we can do this.control_ | CONTROL_CODE\n  // offset_:  char0 for tab offset codes\n  //\n  // It's also worth noting that control codes, and _only_ control codes,\n  // differ between field 1 and field2. Field 2 control codes are always\n  // their field 1 value plus 1. That's why there's the \"| field\" on the\n  // control value.\n  if (this.dataChannel_ === 0) {\n    this.BASE_     = 0x10;\n    this.EXT_      = 0x11;\n    this.CONTROL_  = (0x14 | this.field_) << 8;\n    this.OFFSET_   = 0x17;\n  } else if (this.dataChannel_ === 1) {\n    this.BASE_     = 0x18;\n    this.EXT_      = 0x19;\n    this.CONTROL_  = (0x1c | this.field_) << 8;\n    this.OFFSET_   = 0x1f;\n  }\n\n  // Constants for the LSByte command codes recognized by Cea608Stream. This\n  // list is not exhaustive. For a more comprehensive listing and semantics see\n  // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf\n  // Padding\n  this.PADDING_                    = 0x0000;\n  // Pop-on Mode\n  this.RESUME_CAPTION_LOADING_     = this.CONTROL_ | 0x20;\n  this.END_OF_CAPTION_             = this.CONTROL_ | 0x2f;\n  // Roll-up Mode\n  this.ROLL_UP_2_ROWS_             = this.CONTROL_ | 0x25;\n  this.ROLL_UP_3_ROWS_             = this.CONTROL_ | 0x26;\n  this.ROLL_UP_4_ROWS_             = this.CONTROL_ | 0x27;\n  this.CARRIAGE_RETURN_            = this.CONTROL_ | 0x2d;\n  // paint-on mode\n  this.RESUME_DIRECT_CAPTIONING_   = this.CONTROL_ | 0x29;\n  // Erasure\n  this.BACKSPACE_                  = this.CONTROL_ | 0x21;\n  this.ERASE_DISPLAYED_MEMORY_     = this.CONTROL_ | 0x2c;\n  this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;\n};\n\n/**\n * Detects if the 2-byte packet data is a special character\n *\n * Special characters have a second byte in the range 0x30 to 0x3f,\n * with the first byte being 0x11 (for data channel 1) or 0x19 (for\n * data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an special character\n */\nCea608Stream.prototype.isSpecialCharacter = function(char0, char1) {\n  return (char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f);\n};\n\n/**\n * Detects if the 2-byte packet data is an extended character\n *\n * Extended characters have a second byte in the range 0x20 to 0x3f,\n * with the first byte being 0x12 or 0x13 (for data channel 1) or\n * 0x1a or 0x1b (for data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an extended character\n */\nCea608Stream.prototype.isExtCharacter = function(char0, char1) {\n  return ((char0 === (this.EXT_ + 1) || char0 === (this.EXT_ + 2)) &&\n    (char1 >= 0x20 && char1 <= 0x3f));\n};\n\n/**\n * Detects if the 2-byte packet is a mid-row code\n *\n * Mid-row codes have a second byte in the range 0x20 to 0x2f, with\n * the first byte being 0x11 (for data channel 1) or 0x19 (for data\n * channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are a mid-row code\n */\nCea608Stream.prototype.isMidRowCode = function(char0, char1) {\n  return (char0 === this.EXT_ && (char1 >= 0x20 && char1 <= 0x2f));\n};\n\n/**\n * Detects if the 2-byte packet is an offset control code\n *\n * Offset control codes have a second byte in the range 0x21 to 0x23,\n * with the first byte being 0x17 (for data channel 1) or 0x1f (for\n * data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an offset control code\n */\nCea608Stream.prototype.isOffsetControlCode = function(char0, char1) {\n  return (char0 === this.OFFSET_ && (char1 >= 0x21 && char1 <= 0x23));\n};\n\n/**\n * Detects if the 2-byte packet is a Preamble Address Code\n *\n * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)\n * or 0x18 to 0x1f (for data channel 2), with the second byte in the\n * range 0x40 to 0x7f.\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are a PAC\n */\nCea608Stream.prototype.isPAC = function(char0, char1) {\n  return (char0 >= this.BASE_ && char0 < (this.BASE_ + 8) &&\n    (char1 >= 0x40 && char1 <= 0x7f));\n};\n\n/**\n * Detects if a packet's second byte is in the range of a PAC color code\n *\n * PAC color codes have the second byte be in the range 0x40 to 0x4f, or\n * 0x60 to 0x6f.\n *\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the byte is a color PAC\n */\nCea608Stream.prototype.isColorPAC = function(char1) {\n  return ((char1 >= 0x40 && char1 <= 0x4f) || (char1 >= 0x60 && char1 <= 0x7f));\n};\n\n/**\n * Detects if a single byte is in the range of a normal character\n *\n * Normal text bytes are in the range 0x20 to 0x7f.\n *\n * @param  {Integer} char  The byte\n * @return {Boolean}       Whether the byte is a normal character\n */\nCea608Stream.prototype.isNormalChar = function(char) {\n  return (char >= 0x20 && char <= 0x7f);\n};\n\n/**\n * Configures roll-up\n *\n * @param  {Integer} pts         Current PTS\n * @param  {Integer} newBaseRow  Used by PACs to slide the current window to\n *                               a new position\n */\nCea608Stream.prototype.setRollUp = function(pts, newBaseRow) {\n  // Reset the base row to the bottom row when switching modes\n  if (this.mode_ !== 'rollUp') {\n    this.row_ = BOTTOM_ROW;\n    this.mode_ = 'rollUp';\n    // Spec says to wipe memories when switching to roll-up\n    this.flushDisplayed(pts);\n    this.nonDisplayed_ = createDisplayBuffer();\n    this.displayed_ = createDisplayBuffer();\n  }\n\n  if (newBaseRow !== undefined && newBaseRow !== this.row_) {\n    // move currently displayed captions (up or down) to the new base row\n    for (var i = 0; i < this.rollUpRows_; i++) {\n      this.displayed_[newBaseRow - i] = this.displayed_[this.row_ - i];\n      this.displayed_[this.row_ - i] = '';\n    }\n  }\n\n  if (newBaseRow === undefined) {\n    newBaseRow = this.row_;\n  }\n\n  this.topRow_ = newBaseRow - this.rollUpRows_ + 1;\n};\n\n// Adds the opening HTML tag for the passed character to the caption text,\n// and keeps track of it for later closing\nCea608Stream.prototype.addFormatting = function(pts, format) {\n  this.formatting_ = this.formatting_.concat(format);\n  var text = format.reduce(function(text, format) {\n    return text + '<' + format + '>';\n  }, '');\n  this[this.mode_](pts, text);\n};\n\n// Adds HTML closing tags for current formatting to caption text and\n// clears remembered formatting\nCea608Stream.prototype.clearFormatting = function(pts) {\n  if (!this.formatting_.length) {\n    return;\n  }\n  var text = this.formatting_.reverse().reduce(function(text, format) {\n    return text + '</' + format + '>';\n  }, '');\n  this.formatting_ = [];\n  this[this.mode_](pts, text);\n};\n\n// Mode Implementations\nCea608Stream.prototype.popOn = function(pts, text) {\n  var baseRow = this.nonDisplayed_[this.row_];\n\n  // buffer characters\n  baseRow += text;\n  this.nonDisplayed_[this.row_] = baseRow;\n};\n\nCea608Stream.prototype.rollUp = function(pts, text) {\n  var baseRow = this.displayed_[this.row_];\n\n  baseRow += text;\n  this.displayed_[this.row_] = baseRow;\n\n};\n\nCea608Stream.prototype.shiftRowsUp_ = function() {\n  var i;\n  // clear out inactive rows\n  for (i = 0; i < this.topRow_; i++) {\n    this.displayed_[i] = '';\n  }\n  for (i = this.row_ + 1; i < BOTTOM_ROW + 1; i++) {\n    this.displayed_[i] = '';\n  }\n  // shift displayed rows up\n  for (i = this.topRow_; i < this.row_; i++) {\n    this.displayed_[i] = this.displayed_[i + 1];\n  }\n  // clear out the bottom row\n  this.displayed_[this.row_] = '';\n};\n\nCea608Stream.prototype.paintOn = function(pts, text) {\n  var baseRow = this.displayed_[this.row_];\n\n  baseRow += text;\n  this.displayed_[this.row_] = baseRow;\n};\n\n// exports\nmodule.exports = {\n  CaptionStream: CaptionStream,\n  Cea608Stream: Cea608Stream\n};\n"]},"metadata":{},"sourceType":"script"}